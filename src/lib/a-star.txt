#include <iostream>
#include <iomanip>
#include <queue>
#include <string>
#include <math.h>
#include <ctime>
#include "opencv_lidar.h"

const int GOAL = 1;
const int CALPOINT = 3;
const int n=100; // horizontal size of the map
const int m=100; // vertical size size of the map
static int onlinemap[n][m];
static int closed_nodes_map[n][m]; // map of closed (tried-out) nodes
static int open_nodes_map[n][m]; // map of open (not-yet-tried) nodes
static int dir_map[n][m]; // map of directions
const int dir=8; // number of possible directions to go at any position
// if dir==4
//static int dx[dir]={1, 0, -1, 0};
//static int dy[dir]={0, 1, 0, -1};
// if dir==8
static int dx[dir]={1, 1, 0, -1, -1, -1, 0, 1};
static int dy[dir]={0, 1, 1, 1, 0, -1, -1, -1};
int GlobalCenter[2] = {n / 2,m - 20};


int * goal_point(ConeInfo left,ConeInfo right);

class node
{
    // current position
    int xPos;
    int yPos;
    // total distance already travelled to reach the node
    int level;
    // priority=level+remaining distance estimate
    int priority;  // smaller: higher priority

    public:
        node(int xp, int yp, int d, int p)
            {xPos=xp; yPos=yp; level=d; priority=p;}

        int getxPos() const {return xPos;}
        int getyPos() const {return yPos;}
        int getLevel() const {return level;}
        int getPriority() const {return priority;}

        void updatePriority(const int & xDest, const int & yDest)
        {
             priority=level+estimate(xDest, yDest)*10; //A*
        }

        // give better priority to going strait instead of diagonally
        void nextLevel(const int & i) // i: direction
        {
             level+=(dir==8?(i%2==0?10:14):10);
        }

        // Estimation function for the remaining distance to the goal.
        const int & estimate(const int & xDest, const int & yDest) const
        {
            static int xd, yd, d;
            xd=xDest-xPos;
            yd=yDest-yPos;

            // Euclidian Distance
            d=static_cast<int>(sqrt(xd*xd+yd*yd));

            // Manhattan distance
            //d=abs(xd)+abs(yd);

            // Chebyshev distance
            //d=max(abs(xd), abs(yd));

            return(d);
        }
};

// Determine priority (in the priority queue)
bool operator<(const node & a, const node & b)
{
  return a.getPriority() > b.getPriority();
}

// A-star algorithm.
// The route returned is a string of direction digits.
string pathFind( const int & xStart, const int & yStart,
                 const int & xFinish, const int & yFinish )
{
    static priority_queue<node> pq[2]; // list of open (not-yet-tried) nodes
    static int pqi; // pq index
    static node* n0;
    static node* m0;
    static int i, j, x, y, xdx, ydy;
    static char c;
    pqi=0;

    // reset the node maps
    for(y=0;y<m;y++)
    {
        for(x=0;x<n;x++)
        {
            closed_nodes_map[x][y]=0;
            open_nodes_map[x][y]=0;
        }
    }

    // create the start node and push into list of open nodes
    n0=new node(xStart, yStart, 0, 0);
    n0->updatePriority(xFinish, yFinish);
    pq[pqi].push(*n0);
    open_nodes_map[x][y]=n0->getPriority(); // mark it on the open nodes map

    // A* search
    while(!pq[pqi].empty())
    {
        // get the current node w/ the highest priority
        // from the list of open nodes
        n0=new node( pq[pqi].top().getxPos(), pq[pqi].top().getyPos(),
                     pq[pqi].top().getLevel(), pq[pqi].top().getPriority());

        x=n0->getxPos(); y=n0->getyPos();

        pq[pqi].pop(); // remove the node from the open list
        open_nodes_map[x][y]=0;
        // mark it on the closed nodes map
        closed_nodes_map[x][y]=1;
       // ROS_INFO("info:%d",y);

        // quit searching when the goal state is reached
        //if((*n0).estimate(xFinish, yFinish) == 0)
        if(x==xFinish && y==yFinish)
        {

            // generate the path from finish to start
            // by following the directions
            string path="";
            while(!(x==xStart && y==yStart))
            {
                j=dir_map[x][y];
                c='0'+(j+dir/2)%dir;
                path=c+path;
                x+=dx[j];
                y+=dy[j];
            }

            // garbage collection
            delete n0;
            // empty the leftover nodes
            while(!pq[pqi].empty()) pq[pqi].pop();
            //ROS_INFO("info:%s",path.c_str());
            return path;
        }

        // generate moves (child nodes) in all possible directions
        for(i=0;i<dir;i++)
        {
            xdx=x+dx[i]; ydy=y+dy[i];

            if(!(xdx<0 || xdx>n-1 || ydy<0 || ydy>m-1 || onlinemap[xdx][ydy]==1
                || closed_nodes_map[xdx][ydy]==1))
            {
                // generate a child node
                m0=new node( xdx, ydy, n0->getLevel(),
                             n0->getPriority());
                m0->nextLevel(i);
                m0->updatePriority(xFinish, yFinish);

                // if it is not in the open list then add into that
                if(open_nodes_map[xdx][ydy]==0)
                {
                    open_nodes_map[xdx][ydy]=m0->getPriority();
                    pq[pqi].push(*m0);
                    // mark its parent node direction
                    dir_map[xdx][ydy]=(i+dir/2)%dir;
                }
                else if(open_nodes_map[xdx][ydy]>m0->getPriority())
                {
                    // update the priority info
                    open_nodes_map[xdx][ydy]=m0->getPriority();
                    // update the parent direction info
                    dir_map[xdx][ydy]=(i+dir/2)%dir;

                    // replace the node
                    // by emptying one pq to the other one
                    // except the node to be replaced will be ignored
                    // and the new node will be pushed in instead
                    while(!(pq[pqi].top().getxPos()==xdx &&
                           pq[pqi].top().getyPos()==ydy))
                    {
                        pq[1-pqi].push(pq[pqi].top());
                        pq[pqi].pop();
                    }
                    pq[pqi].pop(); // remove the wanted node

                    // empty the larger size pq to the smaller one
                    if(pq[pqi].size()>pq[1-pqi].size()) pqi=1-pqi;
                    while(!pq[pqi].empty())
                    {
                        pq[1-pqi].push(pq[pqi].top());
                        pq[pqi].pop();
                    }
                    pqi=1-pqi;
                    pq[pqi].push(*m0); // add the better node instead
                }
                else delete m0; // garbage collection
            }
        }
        delete n0; // garbage collection
    }
    return ""; // no route found
}

ConeInfo MiddleLane::path_lane(Mat img,ConeInfo left,ConeInfo right)
{
    ConeInfo middleLane;
    int middle_v = 0;
    middleLane.goal = int(n / 2);
    srand(time(NULL));

    // create empty map
    for(int y=0;y<m;y++)
    {
        for(int x=0;x<n;x++) onlinemap[x][y]=0;
    }

    // fillout the map matrix
    for(int i = 0; i < left.u.size(); i++)
    {
        onlinemap[left.u[i]][left.v[i]] = 1;
    }
    for(int i = 0; i < right.u.size(); i++)
    {
        onlinemap[right.u[i]][right.v[i]] = 1;
    }

    //start and finish locations
    int xA, yA, xB, yB;
    int *goalPoint;
    xA = int(n / 2);
    yA = int(m - 1);
    goalPoint = goal_point(left,right);
    xB = *goalPoint;
    yB = *(goalPoint +1);

    // get the route
    clock_t start = clock();
    string route=pathFind(xA, yA, xB, yB);
    if(route=="") cout<<"An empty route generated!"<<endl;
    clock_t end = clock();
    //double time_elapsed = double((end - start)/CLOCKS_PER_SEC);
    //cout<<"Time to calculate the route (ms): "<<time_elapsed<<endl;

    // follow the route on the map and display it
    if(route.length()>0)
    {
        int j; char c;
        int x=xA;
        int y=yA;
        onlinemap[x][y]=2;
        for(int i=0;i<route.length();i++)
        {
            c =route.at(i);
            j=atoi(&c);
            x=int(x+dx[j]);
            y=int(y+dy[j]);
            if(i % 2 == 0)
            {
                middleLane.u.push_back(x);
                middleLane.v.push_back(y);
            }
            circle(img, Point(x, y), 1, Scalar(255, 255, 255), -1);
        }
        if(route.length() > (CALPOINT))
        {
            middleLane.goal = middleLane.u[CALPOINT];
            circle(img, Point(middleLane.u[CALPOINT], middleLane.v[CALPOINT]), 1, Scalar(0, 255, 255), -1);
            middle_v = middleLane.v[CALPOINT];
            
        }
        else{
            middleLane.goal = x;
            middle_v = y;
        }    
        
        middleLane.angle = float((n/2 - middleLane.goal) * 0.025);
        //middleLane.angle = float(atan(float(goalBias / float(m - middle_v)))*57.3);
        if(middleLane.angle > 0.2) middleLane.angle = 0.2;
        else if(middleLane.angle < -0.2)
            middleLane.angle = -0.2;
        else if(middleLane.angle < 0.05 && middleLane.angle > -0.05)
        {
        	middleLane.angle = 0;
        }
        middleLane.speed = 0.05;
        ROS_INFO("i:%f",middleLane.angle);
    }
    else
        middleLane.speed = 0;

    return middleLane;
}

int * goal_point(ConeInfo leftPoint,ConeInfo rightPoint)
{
    static int Point[2];
    if(leftPoint.u.size() > GOAL && rightPoint.u.size() > GOAL)
    {
        vector<int>::iterator l_u = leftPoint.u.end() - 1;
        vector<int>::iterator l_v = leftPoint.v.end() - 1;
        vector<int>::iterator r_u = rightPoint.u.end() - 1;
        vector<int>::iterator r_v = rightPoint.v.end() - 1;
        Point[0] = int((*l_u + *r_u)/2);
        Point[1] = int((*l_v + *r_v)/2);
        GlobalCenter[0] = Point[0];
        GlobalCenter[1] = Point[1];
        /*Point[0] = int((leftPoint.u[GOAL] + rightPoint.u[GOAL]) / 2);
        Point[1] = int((leftPoint.v[GOAL] + rightPoint.v[GOAL]) / 2);*/
    }
 /*   else if(leftPoint.u.size() > 0 && rightPoint.u.size() > 0)
    {
        vector<int>::iterator l_u = leftPoint.u.end() - 1;
        vector<int>::iterator l_v = leftPoint.v.end() - 1;
        vector<int>::iterator r_u = rightPoint.u.end() - 1;
        vector<int>::iterator r_v = rightPoint.v.end() - 1;
        Point[0] = int((*l_u + *r_u)/2);
        Point[1] = int((*l_v + *r_v)/2);
    }*/
    else if(leftPoint.u.size() == 0 && rightPoint.u.size() > GOAL)
    {
       // if(GlobalCenter[0] == n / 2 && GlobalCenter[1] == m - 20)
        {
            vector<int>::iterator k_u = rightPoint.u.end() - 1;
            vector<int>::iterator k_v = rightPoint.v.end() - 1;
            Point[0] = *k_u - 7;
            Point[1] = *k_v;
        }
    
    }
    else if(rightPoint.u.size() == 0 && leftPoint.u.size() > GOAL)
    {
        //if(GlobalCenter[0] == n / 2 && GlobalCenter[1] == m - 20)
        {
            vector<int>::iterator k_u = leftPoint.u.end() - 1;
            vector<int>::iterator k_v = leftPoint.v.end() - 1;
            Point[0] = *k_u + 7;
            Point[1] = *k_v;
        }
      
    }
    else{
       /* vector<int>::iterator k_u = leftPoint.u.end() - 1;
        vector<int>::iterator k_v = leftPoint.v.end() - 1;
        Point[0] = *k_u;
        Point[1] = *k_v +1;*/
        Point[0] = GlobalCenter[0];
        Point[1] = GlobalCenter[1];
    }
/*    else if(left.u.size() > GOAL && right.u.size() == GOAL)
    {

    }
    else if(left.u.size() == GOAL && right.u.size() > GOAL)
    {

    }
    else if(left.u.size() == 0 || right.u.size() == 0)
    {

    }*/
    return Point;
}





